<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Phil Sturgeon</title>
  <subtitle>I used to contribute to the PHP-FIG, The League of Extraordinary Packages, PHP The Right Way, CodeIgniter, FuelPHP, PyroCMS and a bunch of other stuff, but I gave it all up to join the circus</subtitle>
  <id>https://philsturgeon.uk/</id>
  <link href="https://philsturgeon.uk/"/>
  <link href="https://philsturgeon.uk/feed.xml" rel="self"/>
  <updated>2015-11-20T18:53:00-05:00</updated>
  <author>
    <name>Phil Sturgeon</name>
  </author>
  <entry>
    <title>Deploying with Git-Flow, Tags and CircleCI</title>
    <link rel="alternate" href="https://philsturgeon.uk/2015/11/20/deploying-with-git-flow-tags-and-circleci/"/>
    <id>https://philsturgeon.uk/2015/11/20/deploying-with-git-flow-tags-and-circleci/</id>
    <published>2015-11-20T18:53:00-05:00</published>
    <updated>2015-11-20T19:55:55-05:00</updated>
    <summary type="html">Want an integrated deployment process that sends tags off to the right environment (QA or Production) automatically as soon as they’re pushed to Git? Read on!</summary>
    <content type="html">&lt;p&gt;Want an integrated deployment process that sends tags off to the right environment (QA or Production) automatically as soon as they’re pushed to Git? Read on!&lt;/p&gt;

&lt;p&gt;Back in the day I escaped FTP deployments by &lt;a href="/2008/10/02/Deploying-sites-with-SVN/"&gt;using SVN&lt;/a&gt;, which was “ok”, and later I switched to &lt;a href="/git/2010/02/23/Deploying-websites-with-Git/"&gt;deploying using Git&lt;/a&gt;. Since then I’ve played with Capistrano, used Chef to deploy to AWS and tried all sorts of other services that aim to make deployments easier.&lt;/p&gt;

&lt;p&gt;Nothing has ever been easier than using PaaS systems like Heroku. For some small client sites, or this blog, or whatever else, I used to just &lt;code&gt;alias yolo='git push heroku master'&lt;/code&gt;. That was a solid replacement for the SVN/Git deploys I hacked together in the past, but larger teams need a bit more than that.&lt;/p&gt;

&lt;p&gt;When you’re building a complex application where multiple versions are being built in tandem, a QA team with multiple day review periods and a production server that might need hotfixes deployed regardless of whats in QA, this “do stuff then push” approach does’t hold up.&lt;/p&gt;

&lt;p&gt;At Ride, we use Heroku, and for a while we used &lt;a href="https://guides.github.com/introduction/flow/"&gt;GitHub-flow&lt;/a&gt;. When a PR was merged to &lt;code&gt;master&lt;/code&gt; it would go straight to the Heroku staging environment, then, we had a &lt;code&gt;qa&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt; branch that would go off to the appropriate environment when we were ready to deploy those versions.&lt;/p&gt;

&lt;p&gt;CircleCI supports &lt;a href="https://circleci.com/docs/configuration#deployment"&gt;branch based deployment&lt;/a&gt; nicely, and their &lt;a href="https://circleci.com/docs/continuous-deployment-with-heroku"&gt;Heroku deployments&lt;/a&gt; are incredibly easy. This was ok but having a &lt;code&gt;qa&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt; branch lead to a lot of confusion. The branching model of the code should not be mixed in with implementation details of deployment. People were sending PRs from QA to Production and sometimes hotfixes had to be merged back and things got missed and… it was just a mess.&lt;/p&gt;

&lt;p&gt;I wanted to use tags for this, and more importantly I wanted to use them as more than just “here is a snapshot in case we have to roll back”. I looked into having automated deployment that looked a bit more like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Fancy diagram showing tag version-based deployments to QA/Prod" src="/images/article_images/2015-11-20-deploying-with-git-flow-tags-and-circleci/fancy-diagram.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Annoyingly CircleCI wouldn’t let me do this. Tags would not trigger a build on their system, so the deployments would not happen! I tweeted asking if they’d work on it, and 3 months later.. &lt;a href="https://circleci.com/docs/configuration#tags"&gt;they have tag-based deployments&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;git-flow branch model&lt;/a&gt; helps us create tags. Those tags can then be deployed, and based on the name of the tag, CircleCI will deploy them to QA and/or Production using a bit of regex in the &lt;code&gt;circle.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;deployment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;staging&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;master&lt;/span&gt;
    &lt;span class="s"&gt;heroku&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;appname&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo-app-staging&lt;/span&gt;
  &lt;span class="s"&gt;qa&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/v[0-9]+(\.[0-9]+)+(-rc[0-9]+)?/&lt;/span&gt; &lt;span class="c1"&gt;# v1.2.3 and v1.2.3-rc1&lt;/span&gt;
    &lt;span class="s"&gt;heroku&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;appname&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo-app-qa&lt;/span&gt;
  &lt;span class="s"&gt;production&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/v[0-9]+(\.[0-9]+)+/&lt;/span&gt; &lt;span class="c1"&gt;# v1.2.3 only&lt;/span&gt;
    &lt;span class="s"&gt;heroku&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;appname&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo-app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Technically, that is all you need to do. RC tags will go only to QA, and final tags will go to both.&lt;/p&gt;

&lt;p&gt;This is a guide I put together for folks at Ride, and hopefully it’ll be helpful to some of you.&lt;/p&gt;

&lt;h2 id="types-of-release"&gt;Types of Release&lt;/h2&gt;

&lt;p&gt;There are two types of release.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A “Planned Release”&lt;/li&gt;
  &lt;li&gt;A Hotfix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If there is a huge problem that needs to be fixed, make a hotfix. If it is not breaking the production systems, then it can be part of the next planned release.&lt;/p&gt;

&lt;p&gt;Common sense is required for making that decision. Hotfixes will bypass QA, so use them sparingly.&lt;/p&gt;

&lt;h2 id="making-a-planned-release"&gt;Making a Planned Release&lt;/h2&gt;

&lt;p&gt;A planned release is where we put new features, and anything that happens to be sat in &lt;code&gt;develop&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;We always start a new minor (or a major) version, so planned releases will &lt;strong&gt;not&lt;/strong&gt; be &lt;code&gt;1.6.1&lt;/code&gt; or &lt;code&gt;1.6.2&lt;/code&gt;. This leads to problems with hotfixes, which use those patch level version numbers, and we end up with two people trying to make different tags with the same name…&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git pull origin develop           # Make sure you've got all the develop changes
$ git flow release start 1.6.0      # Increment the version number by at least 1 minor
$ vim CHANGELOG.md                  # Update the release information and whatever else
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can have any branch checked out when you run &lt;code&gt;git flow feature start&lt;/code&gt;, and it will just make the branch from &lt;code&gt;develop&lt;/code&gt; anyway.&lt;/p&gt;

&lt;p&gt;At this point, we want to make a QA release, so that we can get our code tested.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git tag v1.6.0-rc1                # Create an RC1 version of this release so that QA can test it
$ git push origin v1.6.0-rc1        # Send to GitHub, and deploy via CircleCI if it works
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If somebody else created the release branch and you don’t have it locally, you can track the release branch instead of &lt;code&gt;start&lt;/code&gt;ing it:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git flow release track 1.6.0      # This will grab the release/1.6.0 branch from origin and check it out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if we get some feedback and our RC release has some bugs, we can make another. People can PR directly to the &lt;code&gt;release/1.6.0&lt;/code&gt; branch (preferable), or commits can be cherry-picked from elsewhere.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git pull origin release/1.6.0     # Pull changes that were merged via PRs
$ git cherry-pick dfs7432r28r       # Optional: Take a cool fix from develop
$ git tag v1.6.0-rc2                # Create an RC2 version of this release
$ git push origin v1.6.0-rc2        # Send to GitHub, and auto-deploy via CircleCI if it works
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this RC is approved, we can go ahead and update the changelog one last time, then finish the release:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git flow release finish 1.6.0     # Git Flow will merge this to master and develop, and make the final tag
$ git push origin v1.6.0            # Send to GitHub, and auto-deploy via CircleCI if it works
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done! Well, except for a little cleanup:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git push origin master            # update master
$ git push origin develop           # aaand update develop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sending things to QA and waiting for feedback can be a slow process. If production is broken and we need to deploy fast, we need to create a hotfix instead.&lt;/p&gt;

&lt;h2 id="making-a-hotfix-release"&gt;Making a Hotfix Release&lt;/h2&gt;

&lt;p&gt;Instead of using the &lt;code&gt;git flow release&lt;/code&gt; sub-command, we can switch out to use &lt;code&gt;git flow hotfix&lt;/code&gt;. The difference here is mainly that the branch is made from master, which helps us avoid any new feature development, which might not be production ready.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git flow hotfix start 1.6.1       # Makes a hotfix/1.6.1 branch
$ git cherry-pick sdfsha1234        # Pull or merge or cherry-pick in whichever commit(s) fix the issue
$ vim CHANGELOG.md                  # Update release notes with the bug fix
$ git flow hotfix finish 1.6.1      # Mark the hotfix as done and put it into master
$ git push origin v1.6.1            # Put that tag online for everyone to enjoy
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;

&lt;p&gt;This looks like a lot of work for deployments, and I would absolutely prefer to have continuous deployment instead of having to craft and prepare versions, but that is not always possible. For that to work you need more than just unit and integration tests, but you need full, multi-system testing that is rather tricky to achieve.&lt;/p&gt;

&lt;p&gt;With more testing, versions will be less important, and tag-based deploys won’t matter. In the meantime, this whole “use Git-Flow to make tags then let CircleCI shove them on the right environment” approach is pretty damn tastey if you ask me.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>HTTP Documentation with API Blueprint</title>
    <link rel="alternate" href="https://philsturgeon.uk/api/2015/10/08/http-documentation-with-api-blueprint/"/>
    <id>https://philsturgeon.uk/api/2015/10/08/http-documentation-with-api-blueprint/</id>
    <published>2015-10-08T11:59:00-04:00</published>
    <updated>2015-10-08T13:41:48-04:00</updated>
    <summary type="html">When planning my talk and book on REST/HTTP API development, I ended up mentioning documentation towards the end, and flippantly said “Oh and API Blueprint is pretty good probably just use that.” This is something I’d love to fix with a time machine, as these days I spec out an API in API Blueprint before I get anywhere near the code.</summary>
    <content type="html">&lt;p&gt;When planning my talk and book on REST/HTTP API development, I ended up mentioning documentation towards the end, and flippantly said “Oh and API Blueprint is pretty good probably just use that.” This is something I’d love to fix with a time machine, as these days I spec out an API in &lt;a href="https://apiblueprint.org"&gt;API Blueprint&lt;/a&gt; before I get anywhere near the code.&lt;/p&gt;

&lt;p&gt;Documentation-first gives you and the team a chance to play around with what fields are coming and going, and you can even dump this documentation file into a collaborative editing tool like Dropbox Notes or have a Google Hangouts with a tmate session. When the API team and the clients (web, iOS, Android, etc.) have reached a good level of agreement, the contracts can be “locked-down” and put into Git, meaning changes are tracked and blame can be used for anyone who f**ks up the contract.&lt;/p&gt;

&lt;p&gt;If your API documentation is then &lt;a href="https://philsturgeon.uk/api/2015/01/28/dredd-api-testing-documentation/"&gt;tested with Dredd&lt;/a&gt;, you know your contracts are holding up as expected over time.&lt;/p&gt;

&lt;h2 id="getting-started"&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://apiblueprint.org/#get-started"&gt;Getting Started with API Blueprint&lt;/a&gt; is fairly vague and open-ended. They teach you about Drafter which early on is totally irrelevant other than for syntax checking, which the Apiary live editor does a better job of doing. Getting Started is a lot different to what they have documented, so here is how I go about it.&lt;/p&gt;

&lt;p&gt;We’ll assume for now that you want to use their hosted &lt;a href="https://apiary.io/"&gt;Apiary&lt;/a&gt; platform, and I’ll follow up with how to use alternatives in later articles.&lt;/p&gt;

&lt;h2 id="setting-up-the-api-with-apiary"&gt;Setting up the API with Apiary&lt;/h2&gt;

&lt;p&gt;Make a new directory to work in, and in that shove a new &lt;code&gt;apiary.apib&lt;/code&gt; file. We’ll put in the most basic API Blueprint syntax possible:&lt;/p&gt;

&lt;pre class="highlight markdown"&gt;&lt;code&gt;FORMAT: 1A
&lt;span class="gh"&gt;# My API&lt;/span&gt;

&lt;span class="gu"&gt;## GET /places&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Response 200 (text/plain)&lt;span class="sb"&gt;

        Hello World!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Normally I would use &lt;code&gt;~~~&lt;/code&gt; to wrap the response body and only one level of indentation, but Markdown parsers &lt;a href="http://bit.ly/1OmPR9X"&gt;freak out&lt;/a&gt; if you try to put fenced code blocks inside fenced code blocks. You can use 8 spaces, 2 tabs, or wrap it in &lt;code&gt;~~~&lt;/code&gt; yourself.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, to get this file to Apiary, we have to make a GitHub repo. If you’re cool and use the &lt;a href="https://github.com/github/hub"&gt;hub CLI tool&lt;/a&gt; then just do this:&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;hub init
&lt;span class="gp"&gt;$ &lt;/span&gt;hub create
&lt;span class="gp"&gt;$ &lt;/span&gt;git add apiary.apib
&lt;span class="gp"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;"Added basic API Blueprint"&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now this API Blueprint is in a GitHub repo, we can set up Apiary.&lt;/p&gt;

&lt;p&gt;Firstly, click the dropdown next to where it has the default “Notes API” and select “Create New API”.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Option to Create a new API on Apiary" src="/images/article_images/2015-10-08-http-documentation-with-api-blueprint/create-new-api.png" /&gt;&lt;/p&gt;

&lt;p&gt;Click Settings and scroll down to the connect to GitHub option.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Link your repo on GitHub." src="/images/article_images/2015-10-08-http-documentation-with-api-blueprint/link-github-repo.png" /&gt;&lt;/p&gt;

&lt;p&gt;This will automatically set up a Service Hook on Github, so you don’t have to.&lt;/p&gt;

&lt;p&gt;Now, find the new repo we just made, and link it up by clicking Go.&lt;/p&gt;

&lt;p&gt;&lt;img alt="I found it!" src="/images/article_images/2015-10-08-http-documentation-with-api-blueprint/select-repo.png" /&gt;&lt;/p&gt;

&lt;p&gt;If that works, you’ll see a few options. If you can, click “Load blueprint from GitHub” to import, but you might have a bug - which I am not sure of the cause - so Overwrite first, then commit back over the top of it.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Initial GitHub sync options. You probably never need to look here again." src="/images/article_images/2015-10-08-http-documentation-with-api-blueprint/load-blueprint-from-github.png" /&gt;&lt;/p&gt;

&lt;p&gt;Now whenever we push a change to our &lt;code&gt;apiary.apib&lt;/code&gt; file, it’ll update Apiary. If we update Apiary, it’ll save the change to &lt;code&gt;apiary.apib&lt;/code&gt; via a new commit.&lt;/p&gt;

&lt;h2 id="formatted-responses"&gt;Formatted Responses&lt;/h2&gt;

&lt;p&gt;Having a Hello World is a nice start, but we will also need to learn how to work with data formats like JSON. The easiest way to output JSON in the response documentation is to change the response mime-type, and paste some example JSON in.&lt;/p&gt;

&lt;pre class="highlight markdown"&gt;&lt;code&gt;FORMAT: 1A
&lt;span class="gh"&gt;# My API&lt;/span&gt;

&lt;span class="gu"&gt;## GET /places&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Response 200 (application/json)&lt;span class="sb"&gt;

        {
            "places" : [{
                "id" : "fRge5",
                "name" : "Battery Harris"
            }]
        }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a look at that in API Blueprint. Go ahead and use their editor with the live preview as we go along to save you committing stuff. You should see it in their output:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Output of JSON response in Apiary" src="/images/article_images/2015-10-08-http-documentation-with-api-blueprint/basic-json-output.png" /&gt;&lt;/p&gt;

&lt;p&gt;Next, lets add another endpoint. We have &lt;code&gt;GET /places&lt;/code&gt;, so lets add &lt;code&gt;GET /places/{id}&lt;/code&gt; to get just a single place.&lt;/p&gt;

&lt;pre class="highlight markdown"&gt;&lt;code&gt;FORMAT: 1A
&lt;span class="gh"&gt;# My API&lt;/span&gt;

&lt;span class="gu"&gt;## GET /places&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Response 200 (application/json)&lt;span class="sb"&gt;

        {
            "places" : [{
                "id" : "fRge5",
                "name" : "Battery Harris"
            }]
        }


&lt;/span&gt;&lt;span class="gu"&gt;## GET /places/{id}&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Parameters
&lt;span class="p"&gt;  +&lt;/span&gt; id: &lt;span class="sb"&gt;`fRge5`&lt;/span&gt; - The unique ID of the place.
&lt;span class="p"&gt;
+&lt;/span&gt; Response 200 (application/json)&lt;span class="sb"&gt;

        {
            "places" : {
                "id" : "fRge5",
                "name" : "Battery Harris"
            }
        }

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At a very simple level, this does work, but it is not very DRY. We are repeating the data in our examples over and over again, even though they share a really similar structure.&lt;/p&gt;

&lt;p&gt;Let’s leverage &lt;a href="https://github.com/apiaryio/mson"&gt;MSON (“Markdown Syntax for Object Notation”)&lt;/a&gt; to make our lives easier:&lt;/p&gt;

&lt;pre class="highlight markdown"&gt;&lt;code&gt;FORMAT: 1A
&lt;span class="gh"&gt;# My API&lt;/span&gt;

&lt;span class="gu"&gt;## GET /places&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Response 200 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes
&lt;span class="p"&gt;        -&lt;/span&gt; places (array&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;)
    
&lt;span class="gu"&gt;## GET /places/{id}&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Parameters
&lt;span class="p"&gt;  +&lt;/span&gt; id: &lt;span class="sb"&gt;`fRge5`&lt;/span&gt; - The unique ID of the place.
&lt;span class="p"&gt;
+&lt;/span&gt; Response 200 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes
&lt;span class="p"&gt;        -&lt;/span&gt; places (Place)

&lt;span class="gh"&gt;# Data Structures&lt;/span&gt;

&lt;span class="gu"&gt;## Place (object)&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; id: &lt;span class="sb"&gt;`fRge5`&lt;/span&gt; (string)
&lt;span class="p"&gt;-&lt;/span&gt; name: &lt;span class="sb"&gt;`Battery Harris`&lt;/span&gt; (string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This has got a little large, so let’s take a look at this bit by bit.&lt;/p&gt;

&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## GET /places&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Response 200 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes
&lt;span class="p"&gt;        -&lt;/span&gt; places (array&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have our &lt;code&gt;GET /places&lt;/code&gt; request. It’s got a JSON response, with attributes. Those attributes contain a top-level array of places, which is an array of &lt;code&gt;Place&lt;/code&gt; data structures.&lt;/p&gt;

&lt;p&gt;Yep, we’ve defined data structures! Where? This bit:&lt;/p&gt;

&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# Data Structures&lt;/span&gt;

&lt;span class="gu"&gt;## Place (object)&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; id: &lt;span class="sb"&gt;`fRge5`&lt;/span&gt; (string)
&lt;span class="p"&gt;-&lt;/span&gt; name: &lt;span class="sb"&gt;`Battery Harris`&lt;/span&gt; (string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have defined the name of two fields, given them default values (an optional but wise move) then given them the type.&lt;/p&gt;

&lt;p&gt;Because both &lt;code&gt;GET /places&lt;/code&gt; and &lt;code&gt;GET /places/{id}&lt;/code&gt; share this data structure (even though one is an array and the other is an object), we can expand on the fields and really improve the place documentation.&lt;/p&gt;

&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# Data Structures&lt;/span&gt;

&lt;span class="gu"&gt;## Place (object)&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; id: &lt;span class="sb"&gt;`fRge5`&lt;/span&gt; (string, required) - The unique ID of the place.
&lt;span class="p"&gt;-&lt;/span&gt; name: &lt;span class="sb"&gt;`Battery Harris`&lt;/span&gt; (string, required) - Name of the place.
&lt;span class="p"&gt;-&lt;/span&gt; lat: &lt;span class="sb"&gt;`40.712017`&lt;/span&gt; (number, required) - Latitude as a decimal.
&lt;span class="p"&gt;-&lt;/span&gt; lon: &lt;span class="sb"&gt;`-73.950995`&lt;/span&gt; (number, required) - Longitude as a decimal.
&lt;span class="p"&gt;-&lt;/span&gt; status (enum&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;)
&lt;span class="p"&gt;  -&lt;/span&gt; pending - They haven't finished their public profile or whatever
&lt;span class="p"&gt;  -&lt;/span&gt; active - Good as gold
&lt;span class="p"&gt;  -&lt;/span&gt; closed - This place doesn't exist
&lt;span class="p"&gt;-&lt;/span&gt; created_at: &lt;span class="sb"&gt;`2015-01-07T14:03:43Z`&lt;/span&gt; (string, required) - ISO8601 date and time of when the rider was created.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we’ve got descriptions on our fields, and added a bunch more fields. The coolest is the status field, setting a bunch of string values in an enum, with all the options explained.&lt;/p&gt;

&lt;p&gt;&lt;img alt="How our MSON responses look in JSON form " src="/images/article_images/2015-10-08-http-documentation-with-api-blueprint/mson-json-output.png" /&gt;&lt;/p&gt;

&lt;p&gt;You can learn more about the “Attributes” keyword in the &lt;a href="https://github.com/apiaryio/api-blueprint/blob/master/API%20Blueprint%20Specification.md#def-attributes-section"&gt;API Blueprint Spec&lt;/a&gt;, and by reading more about the &lt;a href="https://github.com/apiaryio/mson/blob/master/MSON%20Specification.md"&gt;MSON syntax&lt;/a&gt; specifically.&lt;/p&gt;

&lt;h2 id="requests"&gt;Requests&lt;/h2&gt;

&lt;p&gt;APIs are more than just getting data, so time to look at a request.&lt;/p&gt;

&lt;p&gt;I’ve made an updated full example, which uses Resource Groups to define a URL and then has h3’s with the HTTP method to define what happens in the actions.&lt;/p&gt;

&lt;pre class="highlight markdown"&gt;&lt;code&gt;FORMAT: 1A
&lt;span class="gh"&gt;# My API&lt;/span&gt;

Bit of a description or intro, and an introduction to how to OAuth, etc.

&lt;span class="gh"&gt;# Group Places&lt;/span&gt;

&lt;span class="gu"&gt;## Places Collection [/places]&lt;/span&gt;

&lt;span class="gu"&gt;### GET&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Response 200 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes
&lt;span class="p"&gt;        -&lt;/span&gt; places (array&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;)

&lt;span class="gu"&gt;## Place Resource [/places/{id}]&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Parameters
&lt;span class="p"&gt;  +&lt;/span&gt; id: &lt;span class="sb"&gt;`fRge5`&lt;/span&gt; - The unique ID of the place.

&lt;span class="gu"&gt;### GET&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Response 200 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes
&lt;span class="p"&gt;        -&lt;/span&gt; places (Place)

&lt;span class="gu"&gt;### PUT&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Request (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes
&lt;span class="p"&gt;        -&lt;/span&gt; places (Place)
&lt;span class="p"&gt;
+&lt;/span&gt; Response 200 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes
&lt;span class="p"&gt;        -&lt;/span&gt; places (Place)

&lt;span class="gu"&gt;### DELETE&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Response 204&lt;span class="sb"&gt;


&lt;/span&gt;&lt;span class="gh"&gt;# Data Structures&lt;/span&gt;

&lt;span class="gu"&gt;## Place (object)&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; id: &lt;span class="sb"&gt;`fRge5`&lt;/span&gt; (string, required) - The unique ID of the place.
&lt;span class="p"&gt;-&lt;/span&gt; name: &lt;span class="sb"&gt;`Battery Harris`&lt;/span&gt; (string, required) - Name of the place.
&lt;span class="p"&gt;-&lt;/span&gt; lat: &lt;span class="sb"&gt;`40.712017`&lt;/span&gt; (number, required) - Latitude as a decimal.
&lt;span class="p"&gt;-&lt;/span&gt; lon: &lt;span class="sb"&gt;`-73.950995`&lt;/span&gt; (number, required) - Longitude as a decimal.
&lt;span class="p"&gt;-&lt;/span&gt; status (enum&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;)
&lt;span class="p"&gt;  -&lt;/span&gt; pending - They haven't finished their public profile or whatever.
&lt;span class="p"&gt;  -&lt;/span&gt; active - Good as gold.
&lt;span class="p"&gt;  -&lt;/span&gt; closed - This place doesn't exist.
&lt;span class="p"&gt;-&lt;/span&gt; created_at: &lt;span class="sb"&gt;`2015-01-07T14:03:43Z`&lt;/span&gt; (string, required) - ISO8601 date and time of when the rider was created.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking good huh? We’ve got &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; in there too now, showing off a &lt;code&gt;204&lt;/code&gt; no less.&lt;/p&gt;

&lt;p&gt;Well, one thing left: Using &lt;code&gt;POST&lt;/code&gt; to create a resource on the collection.&lt;/p&gt;

&lt;p&gt;The tough part here is that most &lt;code&gt;POST&lt;/code&gt; requests involve sending partial representations, and letting the server fill in the gaps. To do that, our &lt;code&gt;Place&lt;/code&gt; data structure falls over a little bit.&lt;/p&gt;

&lt;p&gt;So, we can split them up a bit. Take a look at this full example to see what I changed:&lt;/p&gt;

&lt;pre class="highlight markdown"&gt;&lt;code&gt;FORMAT: 1A
&lt;span class="gh"&gt;# My API&lt;/span&gt;

Bit of a description or intro, and an introduction to how to OAuth, etc.

&lt;span class="gh"&gt;# Group Places&lt;/span&gt;

&lt;span class="gu"&gt;## Places Collection [/places]&lt;/span&gt;

&lt;span class="gu"&gt;### GET&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Response 200 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes
&lt;span class="p"&gt;        -&lt;/span&gt; places (array&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Place Full&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;)

&lt;span class="gu"&gt;### POST&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Request (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes
&lt;span class="p"&gt;        -&lt;/span&gt; places (Place Create)
&lt;span class="p"&gt;
+&lt;/span&gt; Response 200 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes
&lt;span class="p"&gt;        -&lt;/span&gt; places (Place Full)

&lt;span class="gu"&gt;## Place Resource [/places/{id}]&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Parameters
&lt;span class="p"&gt;  +&lt;/span&gt; id: &lt;span class="sb"&gt;`fRge5`&lt;/span&gt; - The unique ID of the place.

&lt;span class="gu"&gt;### GET&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Response 200 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes
&lt;span class="p"&gt;        -&lt;/span&gt; places (Place Full)

&lt;span class="gu"&gt;### PUT&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Request (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes
&lt;span class="p"&gt;        -&lt;/span&gt; places (Place Full)
&lt;span class="p"&gt;
+&lt;/span&gt; Response 200 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes
&lt;span class="p"&gt;        -&lt;/span&gt; places (Place Full)

&lt;span class="gu"&gt;### DELETE&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Response 204

&lt;span class="gh"&gt;# Data Structures&lt;/span&gt;

&lt;span class="gu"&gt;## Place Create (object)&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; name: &lt;span class="sb"&gt;`Battery Harris`&lt;/span&gt; (string, required) - Name of the place.
&lt;span class="p"&gt;-&lt;/span&gt; lat: &lt;span class="sb"&gt;`40.712017`&lt;/span&gt; (number, required) - Latitude as a decimal.
&lt;span class="p"&gt;-&lt;/span&gt; lon: &lt;span class="sb"&gt;`-73.950995`&lt;/span&gt; (number, required) - Longitude as a decimal.
&lt;span class="p"&gt;-&lt;/span&gt; status (enum&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;)
&lt;span class="p"&gt;  -&lt;/span&gt; pending - They haven't finished their public profile or whatever.
&lt;span class="p"&gt;  -&lt;/span&gt; active - Good as gold.
&lt;span class="p"&gt;  -&lt;/span&gt; closed - This place doesn't exist.

&lt;span class="gu"&gt;## Place Full (object)&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; id: &lt;span class="sb"&gt;`fRge5`&lt;/span&gt; (string, required) - The unique ID of the place.
&lt;span class="p"&gt;-&lt;/span&gt; Include Place Create
&lt;span class="p"&gt;-&lt;/span&gt; created_at: &lt;span class="sb"&gt;`2015-01-07T14:03:43Z`&lt;/span&gt; (string, required) - ISO8601 date and time of when the rider was created.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have a &lt;code&gt;Place Create&lt;/code&gt; object which has the fields required for creating, and the &lt;code&gt;Place Full&lt;/code&gt; object, which includes &lt;code&gt;Place Create&lt;/code&gt; for that full effect along with two extra fields that’ll only show up afterwards.&lt;/p&gt;

&lt;h2 id="api-blueprint-vs-alternatives"&gt;API Blueprint vs. Alternatives&lt;/h2&gt;

&lt;p&gt;There are a few options around, the most popular being &lt;a href="http://swagger.io/"&gt;Swagger&lt;/a&gt; and &lt;a href="http://raml.org/"&gt;RAML&lt;/a&gt;. &lt;a href="http://nordicapis.com/top-specification-formats-for-rest-apis/"&gt;Nordic API compare these formats&lt;/a&gt; briefly, but it is a little vague.&lt;/p&gt;

&lt;p&gt;I’ll be honest, everything I’ve done with Swagger was awful. Swagger-PHP is based around an convoluted code-orientated approach, where it assumes your actual model classes are going to be how you represent your data and that’s just not at all true. Maybe I could find a way to tie Swagger-PHP to the serializers instead, but even Swagger UI is terrible. Swagger just feels wrong to me.&lt;/p&gt;

&lt;p&gt;RAML is powerful format. It has a lot of tooling for it, but tbh much of that tooling exists for API Blueprint too. The main drawback for me is that RAML is YAML, and I fucking hate YAML.&lt;/p&gt;

&lt;p&gt;Most complaints about API Blueprint are that the getting started is bad (I fixed that ^) or that it’s complex to write. Well, recent versions have made the syntax less verbose, MSON is excellent and you can get syntax checkers for many editors, including my new hero  &lt;a href="https://atom.io/packages/language-api-blueprint"&gt;Atom&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check them out and see which is best for you, but the idea is that you want to be specing your API and creating documentation &lt;em&gt;before&lt;/em&gt; you build your API when possible.&lt;/p&gt;

&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;

&lt;p&gt;There’s a lot more to Apiary and MSON than this, and I want to show you how to use this for mock servers next, but having this stuff built out is a great way to get a team to agree on the contracts for requests and responses before people start messing around actually building stuff.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Everyones Favourite Twitter Characters</title>
    <link rel="alternate" href="https://philsturgeon.uk/2015/10/02/everyones-favourite-twitter-character/"/>
    <id>https://philsturgeon.uk/2015/10/02/everyones-favourite-twitter-character/</id>
    <published>2015-10-02T13:22:00-04:00</published>
    <updated>2015-10-03T16:57:43-04:00</updated>
    <summary type="html">Regularly, I make a general piece of advice, and the types of responses are pretty similar regardless of the actual conversation.</summary>
    <content type="html">&lt;p&gt;Regularly, I make a general piece of advice, and the types of responses are pretty similar regardless of the actual conversation.&lt;/p&gt;

&lt;p&gt;Lets take a fairly innocuous example:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BikeTip: When buying a bike, if the tyres are flat, walk away. That bike is probably fucked and you’re being tricked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What I would probably have said here – given more space to utilize the wonderful language that is English – would be:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BikeTip: When buying a second-hand bike, if the tyres are flat and the owner refuses to fix them up, you can’t take it for a test ride. Without a test ride, it’s really hard to detect certain problems, so you should probably walk away. This is a common tactic (amongst many others) to shift broken-ass bikes, so it’s probably not worth buying.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To me, there is no difference at all between those two statements. That’s rather unfortunate, because to me, saying the first is the same as saying the second.&lt;/p&gt;

&lt;p&gt;To everyone else, it’s a chance to come and say random shit at me.&lt;/p&gt;

&lt;h2 id="the-expert"&gt;The Expert&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;As an experienced bike mechanic, I strongly disagree. I can detect fault with a bike without just checking the tyres. I check the chain for rust, flip it to check if the wheel is true, see how tight the spokes are and even check the bottom bracket for a wobble&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok expert, this was general advice, which doesn’t apply to you clearly. Well done.&lt;/p&gt;

&lt;h2 id="the-gambler"&gt;The Gambler&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve bought a bike like that and it was fine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Great that’s a cool story, but you were lucky.&lt;/p&gt;

&lt;h2 id="the-elitist"&gt;The Elitist&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can’t even fix flat tyres? How stupid are you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This general advice wasn’t about me. As an beginner/intermediate biker, my friends might now know how to do that. Does the seller have a patch kit? Does my friend?&lt;/p&gt;

&lt;p&gt;At a restaurant, if a steak is undercooked you’d ask them to cook it. If they say no then fuck them, I’m not gonna take it home and cook it myself. That’s not how this works.&lt;/p&gt;

&lt;p&gt;Besides, using this opportunity to randomly attack is a strange move. Are you ok? Do you need a friend to talk to? It’s not me, but… somebody probably likes you.&lt;/p&gt;

&lt;h2 id="the-lesley-gore"&gt;The Lesley Gore&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t tell me what to do! I’ll buy any damn bike I want.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok do whatever just trying to help…&lt;/p&gt;

&lt;h2 id="the-opinionater"&gt;The Opinionater&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;That’s your opinion!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course it’s my opinion, it came out of &lt;em&gt;my&lt;/em&gt; face.&lt;/p&gt;

&lt;p&gt;If we’re out having a beer and I say “This beer is lovely.” and you shout “WELL THAT’S YOUR OPINON” at me I’m not gonna hang out with you again. People speak from their point of view.&lt;/p&gt;

&lt;h2 id="the-patriot"&gt;The Patriot&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;I think you’ll find it’s “tires”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Words existed before the Webster dictionary, and tyres is perfectly valid if you’re British. Google is also a thing if you’re confused.&lt;/p&gt;

&lt;h2 id="the-not-quite"&gt;The Not Quite&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;When I got my bike online it had flat tyres but tbh it was fine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah… ugh… clearly… forget it.&lt;/p&gt;

&lt;h2 id="the-mile-wide"&gt;The Mile Wide&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve never once been to a motorbike showroom that wouldn’t let you take a bike for a test ride, what the fuck are you talking about.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wow ugh I meant bicycle I always talk about bicycles. Who are you and why are you screaming at me.&lt;/p&gt;

&lt;h2 id="the-favourite"&gt;The Favourite&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Bob favourited a tweet you were mentioned in by The Not Quite.&lt;/li&gt;
    &lt;li&gt;Bob favourited a tweet you were mentioned in by The Mile Wide.&lt;/li&gt;
    &lt;li&gt;Bob favourited another tweet you were mentioned in by The Mile Wide.&lt;/li&gt;
    &lt;li&gt;Bob needs to get a fucking hobby because he’s still favouriting any sort of tweet that disagrees with you and they all misunderstood what you said.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id="the-alternative"&gt;The Alternative&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;That’s not the problem. The real problem is checking for kinks or bends in the frame or chainstay. That’ll mess you up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah totally. That’s a great tip, but why are you coming at this like it’s an either/or?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Flat tyres mask problems&lt;/li&gt;
  &lt;li&gt;Subtly damaged frames are also not great&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We could both sit around listing out 100 things to worry about, but just because you know one other edge case problem, it does not invalidate the problem I mentioned.&lt;/p&gt;

&lt;h2 id="the-bike-salesman"&gt;The Bike Salesman&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve been selling bicycles for years now and I find this attitude disrespectful. Not all salesmen are trying to rip you off.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ugh yeah I meant assholes on Craigslist and that shitty bike store down the road that actually does. I’ve been in there, and my friends have told me tales of shitty bike shops and Craigslist wankers doing this too.&lt;/p&gt;

&lt;h2 id="the-exception"&gt;The Exception&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;That’s dumb. What if that bike is a vintage Raleigh frame in the perfect colour, and I’ve been trying to find one for ages. Either way, the price is worth it just for the frame.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, that sounds like a fairly good exception to my rather general advice. If you’re happy to take that project on and do the work, or pay for it to be done, then yeah: get that bike. General advice &lt;em&gt;always&lt;/em&gt; has exceptions. That wouldn’t exactly fit in the tweet.&lt;/p&gt;

&lt;p&gt;Certainly these people don’t mean to be annoying, but damn, it’s pretty annoying.&lt;/p&gt;

&lt;p&gt;Especially the expert. It’s nice that people who know a lot about a certain field are following me and care enough to answer, but when I say something in general and you #WellActually me for 20 minutes, it’s not exactly helpful to anyone.&lt;/p&gt;

&lt;p&gt;If you see me making a statement that you disagree with, absolutely come and talk to me about it, but before you do, assume the &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python&lt;/a&gt; is on my mind while I’m making it.&lt;/p&gt;

&lt;p&gt;Try to avoid being one of these characters above. I really don’t like it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>HTTP Status Codes Are Not Enough</title>
    <link rel="alternate" href="https://philsturgeon.uk/http/2015/09/23/http-status-codes-are-not-enough/"/>
    <id>https://philsturgeon.uk/http/2015/09/23/http-status-codes-are-not-enough/</id>
    <published>2015-09-23T17:00:00-04:00</published>
    <updated>2015-10-08T13:42:13-04:00</updated>
    <summary type="html">Don't be fooled into thinking you can use HTTP status codes on their own. You need to supplement them using error messages, with maybe some specific error codes of your own and links to documentation explaining what the problem is.</summary>
    <content type="html">&lt;p&gt;I spotted an article called &lt;a href="http://jakeyesbeck.com/2015/09/20/rails-http-status-codes/"&gt;Just learn Rails (Part 3) HTTP status codes&lt;/a&gt;. It started off good, and I liked that it was teaching people to avoid hardcoding their HTTP status codes in code, using &lt;code&gt;:conflict&lt;/code&gt; instead of &lt;code&gt;409&lt;/code&gt; and the like.&lt;/p&gt;

&lt;p&gt;That is a good message to send, which is why I wrote an article on &lt;a href="https://philsturgeon.uk/http/2015/08/16/avoid-hardcoding-http-status-codes/"&gt;exactly that&lt;/a&gt; last month.&lt;/p&gt;

&lt;p&gt;The article also stresses that you must not return errors on &lt;code&gt;200&lt;/code&gt;, which only the insanity wolf would do.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://speakerdeck.com/philsturgeon/api-pain-points-confoo-2015?slide=29"&gt;&lt;img alt="Insanity wolf hates errors on a 200" src="/images/article_images/2015-09-23-http-status-codes-are-not-enough/insanity-wolf-errors.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem with the article is when it gets to sarcastically pointing out error messages are an overly verbose waste of time, or needless novella. I pointed out the flaw in this logic using some jovially hyperbolic wording as I’m known to do, and in the end the chap suggested I didn’t understand the article.&lt;/p&gt;

&lt;p&gt;I understand the article perfectly, and it’s a damaging message to send.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Instead, Ruby on Rails gives us very helpful symbols that can be used to accurately convey the appropriate response to end users.&lt;/p&gt;

  &lt;p&gt;To only return the correct HTTP status code, the books controller can be rewritten to:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BooksController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="n"&gt;before_filter&lt;/span&gt; &lt;span class="ss"&gt;:authenticate_user&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="ss"&gt;:unauthorized&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="no"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fuck that! Am I unauthorized because I didn’t provide a key or because the key was invalid? A developer can spend forever debugging 
that alone.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alternatively, if extremely verbose and tedious error messages are the cat’s pajamas to you, it is possible to use these symbols in conjunction with response bodies:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BooksController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="n"&gt;before_filter&lt;/span&gt; &lt;span class="ss"&gt;:authenticate_user&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;
      &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;error: &lt;/span&gt;&lt;span class="s1"&gt;'User is not logged in'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:unauthorized&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:ok&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;status: &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Error messages are not some over-the-top exercise, creating tedious reading and understanding for everyone involved. They are fundafuckingmental to having any sort of half useful API.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id="brevity-is-underrated"&gt;Brevity is underrated&lt;/h3&gt;
  &lt;p&gt;This example has exposed the difference between a decent API and one that understands how HTTP should work. While the specific problem could be solved with CanCanCan, it is important to understand how and why those libraries work the way that they do.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Absolutely, a good API should definitely use status codes appropriately, but the suggestion throughout this article is that suplimenting that HTTP status messages are a pain, or uneccessary.&lt;/p&gt;

&lt;p&gt;Bunk. Bunk I say!&lt;/p&gt;

&lt;p&gt;Take a look at this:&lt;/p&gt;

&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"errors"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;"code"&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20002&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;"title"&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"There are no savings for this user."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;"status"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How the flying shit would I know from just a 400 that that user doesn’t have any savings? Especially when that same endpoint could also return:&lt;/p&gt;

&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"errors"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;"code"&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;"title"&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Invalid geopoints for simulated savings."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;"status"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The whole API does not rely on 400 errors over here, no, but even if you did find a more suitable status code I still would not know &lt;em&gt;exactly&lt;/em&gt; what was happening.&lt;/p&gt;

&lt;p&gt;If you make me work with an API that does not have errors, I’m not coming to your birthday party.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If one were to continue down the naive path, returning hashes or strings by default for all responses, things would become messy quickly. That response structure unjustly handcuffs the API clients to be unnecessarily tolerant of ad-hoc text responses. But, if the API conforms to HTTP standards, a client knows exactly what each response means. Nothing is left up to the imagination, and no bright new developer can accidentally change the error key to Error and ruin everyone’s day.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Returning error messages is not in the HTTP specification, so best not to do it ever?&lt;/p&gt;

&lt;p&gt;I’ll concede that my jimmies do get a little rustled when I see people making their own random ad-hoc error formats, especially when error messages for APIs are a solved problem with some great solutions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://jsonapi.org/format/#errors"&gt;JSON-API: Errors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.mnot.net/blog/2013/05/15/http_problem"&gt;HTTP Problems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hilariously that last one &lt;a href="https://tools.ietf.org/html/draft-nottingham-http-problem-03"&gt;is an RFC&lt;/a&gt;, written largely the same chap responsible for most of the modern day HTTP specification, so, if we’re into following specs with our APIs then we should probably be doing that.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Instead of capturing in text every single detail about why a request did not result in an expected response, use HTTP status codes and save the novella for another time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ll take vague hints, a brief description and a link to some docs, or any one of those at a pinch. None of that is novella. If you give me none of that, then you’ve released a useless pile of shit, and most developers will just use a different API by somebody else instead of integrating with your business.&lt;/p&gt;

&lt;h2 id="nice-errors"&gt;Nice Errors&lt;/h2&gt;

&lt;p&gt;The specifics of how you throw these vary by language, framework, and personal preference. Here is an approach we use in Rails:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;  
  &lt;span class="n"&gt;rescue_from&lt;/span&gt; &lt;span class="s1"&gt;'User::MissingPaymentDetails'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;render_json_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="ss"&gt;:match_accepted_by_non_paying_passenger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;:precondition_failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;details: &lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_json_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
		&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Rack&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Utils&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SYMBOL_TO_STATUS_CODE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;Symbol&lt;/span&gt;

    &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;code: &lt;/span&gt;&lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"error_codes.&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.code"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"error_codes.&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.message"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="ss"&gt;status: &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;errors: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="ss"&gt;status: &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in &lt;code&gt;config/locales/errors.en.yaml&lt;/code&gt;:&lt;/p&gt;

&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;en&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;error_codes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="s"&gt;match_accepted_by_non_paying_passenger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;19005&lt;/span&gt;
      &lt;span class="s"&gt;message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;It appears we're missing your payment details.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this approach, you can catch global exceptions at a very high level for really generic things like this, and handle very specific exceptions in controllers. Hitting the method yourself works too of course. We even have some logic that turns validation errors into standard errors in this way.&lt;/p&gt;

&lt;p&gt;All of this allows for business logic to be translated into meaningful errors, all with useful computer &lt;em&gt;and&lt;/em&gt; human readable error codes, with a convenient &lt;code&gt;:match_accepted_by_non_paying_passenger&lt;/code&gt; that corresponds to the full title and the error code. Then you’re also providing the HTTP status via a symbol using &lt;code&gt;:precondition_failed&lt;/code&gt; instead of just shoving a &lt;code&gt;412&lt;/code&gt; in the controller.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Auto-Incrementing IDs: Giving your Data Away</title>
    <link rel="alternate" href="https://philsturgeon.uk/http/2015/09/03/auto-incrementing-to-destruction/"/>
    <id>https://philsturgeon.uk/http/2015/09/03/auto-incrementing-to-destruction/</id>
    <published>2015-09-03T09:47:00-04:00</published>
    <updated>2015-10-08T14:02:11-04:00</updated>
    <summary type="html">Something we’re always taught as developers, usually by tutorials or via the defaults in various ORM tools, is every SQL table needs an auto-incrementing ID. This is a weirdly common fallacy, enforced by old tutorials, new tutorials and half-arsed tooling in various forms. Why are auto-incrementing IDs a problem? Because it means people can download your database.</summary>
    <content type="html">&lt;p&gt;Something we’re always taught as developers, usually by tutorials or via the defaults in various ORM tools, is every SQL table needs an auto-incrementing ID. This is a weirdly common fallacy, enforced by old tutorials, new tutorials and half-arsed tooling in various forms. Why are auto-incrementing IDs a problem? Because it means people can download your database.&lt;/p&gt;

&lt;p&gt;This is not a new problem, it’s been covered well over the last twenty years, but it is a problem I tell people about in my API talks and it seems new to many. People want to know how to avoid it, and how API data can ever be safe.&lt;/p&gt;

&lt;h2 id="a-case-study"&gt;A Case Study&lt;/h2&gt;

&lt;p&gt;I contracted for a startup going through an accelerator, where one of the teams were building a unique database of user-generated photographs, and these photos were of artwork. Artwork like awesome graffiti, unknown installations, etc., and this data was not available anywhere else on the Internet.&lt;/p&gt;

&lt;p&gt;They had these two URLs on their API:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;GET /artworks/234&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;GET /users/6138&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What are the problems here?&lt;/p&gt;

&lt;h3 id="leaking-success-to-competitors"&gt;Leaking “Success” to Competitors&lt;/h3&gt;

&lt;p&gt;As a startup, you often have competitors. Letting those competitors know the size of your data set, and how many users you have in your system, could lead to some pretty embarrassing situations.&lt;/p&gt;

&lt;p&gt;Looking at the URL &lt;code&gt;GET /users/6138&lt;/code&gt;, I can go to &lt;code&gt;GET /users/1&lt;/code&gt;. If that shows me data, I can reasonably assume they have &lt;em&gt;at least&lt;/em&gt; 6138 users, but to find the total I can easily make a script that &lt;code&gt;++$id&lt;/code&gt; and counts every HTTP status &lt;code&gt;200&lt;/code&gt;, and also counts things like 404 or 410, to give a accurate number of how many active users there are, and how many closed their account.&lt;/p&gt;

&lt;p&gt;That could embarrass a larger company, or utterly destroy a small startup.&lt;/p&gt;

&lt;h3 id="leaking-datasets-to-competitors-or-assholes"&gt;Leaking Datasets to Competitors (or Assholes)&lt;/h3&gt;

&lt;p&gt;Leaking statistics to your enemies might not be something that keeps you up at night, but what about giving away your actual data?&lt;/p&gt;

&lt;p&gt;In our case study, these people had unique data, available nowhere else. If other people want this data, they can use the same &lt;code&gt;++$id&lt;/code&gt; approach to grab a hold of that data, and populate their own app, making a new competitor quite easily, and with a slightly better app could potentially put them out of business.&lt;/p&gt;

&lt;p&gt;Balls.&lt;/p&gt;

&lt;h2 id="alternatives"&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;There are some alternatives to this, which can be used in pretty much any scenario.&lt;/p&gt;

&lt;h3 id="id-obfuscation"&gt;ID Obfuscation&lt;/h3&gt;

&lt;p&gt;If you’re stuck with 1, 2, 3 in your DB due to a picky ORM, or due to not wanting to change an existing schema and all the data that goes with it, you can keep your IDs and just “hide” them.&lt;/p&gt;

&lt;p&gt;Obfuscation allows you to turn a &lt;code&gt;1&lt;/code&gt; into a &lt;code&gt;"df234FSafd"&lt;/code&gt; and a &lt;code&gt;"p363fdte7"&lt;/code&gt; into a &lt;code&gt;2364&lt;/code&gt;. Your IDs stay the same, but the user cannot &lt;code&gt;++$id&lt;/code&gt; anymore because &lt;code&gt;"df234FSafd" + 1&lt;/code&gt; isn’t a thing.&lt;/p&gt;

&lt;p&gt;They use a hidden secret key, without which the strings are not reversible, so they’re relatively safe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PHP&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/zackkitzmiller/tiny-php/"&gt;Tiny&lt;/a&gt; - based on code used by &lt;a href="http://zurb.com/forrst"&gt;Forrst&lt;/a&gt;, and built by the excellent &lt;a href="https://twitter.com/zackkitzmiller"&gt;Zack Kitzmiller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/namick/obfuscate_id"&gt;obfuscate_id&lt;/a&gt; - Rails only sorry other people, but looks good&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/marekweb/opaque-id"&gt;Opaque ID&lt;/a&gt; - Obfuscation for integer IDs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;JavaScript, Python, Ruby, PHP, Java, Scala, Perl, Swift, Clojure, Objective-C, C, C++11, Go, Erlang, Lua, Haskell, Elixir, Rust, ColdFusion, Groovy, Kotlin, Nim, VBA, ActionScript, CoffeeScript, Bash and for Node.js &amp;amp; .NET&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://hashids.org/"&gt;HashIDs&lt;/a&gt; - Apparently they’re not so secure and the salt can be guessed from about 30 hashes, so probably don’t use them, but if you’re stuck for anything else…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="universally-unique-ids"&gt;Universally Unique IDs&lt;/h3&gt;

&lt;p&gt;UUID is a cool way to make some really unique identifiers for your records, without relying on the DB to auto-increment to make it unique.&lt;/p&gt;

&lt;p&gt;These can be used in place of usual IDs. They look a little bit like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;de305d54-75b4-431b-adb2-eb6b9e546014&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That, again, is not &lt;code&gt;++$id&lt;/code&gt;-able.&lt;/p&gt;

&lt;p&gt;On top of that, two records made at the exact same split second will not have the same UUID, which is where the “universally” bit comes in. You can use this for offline support, meaning you make an item locally, give it an UUID, then sync up with the database when your user gets out of the subway and you’ve maintained integrity of your IDs and your data at large.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Performance for UUIDs was brought up on Twitter, and there is a common misconception that UUIDs are slow or terrible. Firstly, do not store UUIDs as a string (varchar or char). Store them as binary, and if you use something that prefers PKs to be ordered then you can use &lt;a href="https://www.percona.com/blog/2014/12/19/store-uuid-optimized-way/"&gt;ordered UUIDs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PHP&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://packagist.org/packages/ramsey/uuid"&gt;ramsey/uuid&lt;/a&gt; - PHP 5.4+ library for generating RFC 4122 version 1, 3, 4, and 5 UUIDs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://ruby-doc.org/stdlib-2.2.3/libdoc/securerandom/rdoc/SecureRandom.html#method-c-uuid"&gt;SecureRandom.uuid&lt;/a&gt; - Built in!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://docs.python.org/2/library/uuid.html"&gt;uuid&lt;/a&gt; - Built in!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="but-if-your-app-can-get-it-so-can-the-user"&gt;But if your app can get it, so can the user&lt;/h2&gt;

&lt;p&gt;Maybe, but how do your users get to the data?&lt;/p&gt;

&lt;p&gt;In the case of pageable content, like a “Recent Events” list, simply limit the history of the data you can search through to a few days.&lt;/p&gt;

&lt;p&gt;In the case of geo data searched for by proximity (stuff near you), set a limit on the number of records that can be returned, and how far out they can zoom. They’d have to script a bot to get it all which would take a while and is something you can probably program to detect.&lt;/p&gt;

&lt;p&gt;Also rate limiting. If you require folks to register an app, you can limit their credentials on the free tier to stop them downloading everything.&lt;/p&gt;

&lt;p&gt;Then, if they do start trying to download your whole data set, it’ll at least take them a long time, and again, hopefully give you a chance to notice suspect activity.&lt;/p&gt;

&lt;p&gt;How? Look for apps regularly hitting their rate limit. Look for stuff that is randomly search geo boxes moving across the map in an unnatural way (people don’t move in a sweeping left to right grid pattern).&lt;/p&gt;

&lt;p&gt;Automate those detections, and fire off an email to the bastards trying to download your dataset. You’ll have their email because they signed up, and if they’re really daft they’ll use their work email. I’ve seen that happen, and we had a nice little chat.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>No Booze for a Month</title>
    <link rel="alternate" href="https://philsturgeon.uk/charity/2015/08/22/no-booze/"/>
    <id>https://philsturgeon.uk/charity/2015/08/22/no-booze/</id>
    <published>2015-08-22T13:30:00-04:00</published>
    <updated>2015-09-23T16:24:47-04:00</updated>
    <summary type="html">In 5 weeks I’ll be riding my bike a really long way to raise money for charity. Sadly, as I ride bikes all the time, not so many people are interested in forking out. Luckily, I have a plan!</summary>
    <content type="html">&lt;p&gt;In 5 weeks I’ll be riding my bike a really long way to raise money for charity. Sadly, as I ride bikes all the time, not so many people are interested in forking out. Luckily, I have a plan!&lt;/p&gt;

&lt;p&gt;In addition to &lt;a href="/charity/2015/08/11/geeks-giving-for-aids-again/"&gt;offering tech/PHP related rewards&lt;/a&gt; for cool free stuff, I thought I would go one step further to shock people into grabbing their wallets.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ONE MONTH, NO BOOZE!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah you heard me. Usually there is nothing but cider pumping through my veins. Terrible, sickly sweet, American cider these days, but booze all the same.&lt;/p&gt;

&lt;p&gt;In the name of raising a boatload of cash for charity, I am going to go sober for one whole month.&lt;/p&gt;

&lt;p&gt;I am 5 days in. This runs August 15th, to September 15th.&lt;/p&gt;

&lt;p&gt;Last week was a trial run of 7 days, which I did succeed but tbh it has only made this month harder.&lt;/p&gt;

&lt;p&gt;Anyone who knows me knows how hard this is going to be, especially as I have two conferences to attend and a 26 hour flight to New Zealand to get through next week.&lt;/p&gt;

&lt;p&gt;But, jokes aside, my reliance on booze and the inconvenience of going without it is nothing compared to what those living with HIV/Aids have to go through, and I’m doing this to raise money for them.&lt;/p&gt;

&lt;p&gt;Please put your hand in your pocket and &lt;a href="http://fundraising.housingworks.org/participant/philstu-15"&gt;donate some cash for an amazing cause&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
